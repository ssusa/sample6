git for windows
dotnet-sdk-8.0.407-win-x64.exe

拡張機能 Rest Client

mkdir sample7_sln
cd sample7_sln
dotnet new sln -n sample7
dotnet new webapi -n sample7 --framework net8.0
dotnet sln add sample7/sample7.csproj
echo "# Ignore files and directories" > .gitignore これだめ
echo "/bin/" >> .gitignore
echo "/obj/" >> .gitignore

Codeのソース管理でリポジトリ初期化
ブランチを発行

これにMicrosoft.EntityFrameworkCoreも含まれる
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL

dotnet add package Microsoft.EntityFrameworkCore.Design

--DBからモデルを作成
dotnet tool install --global dotnet-ef

--DBからモデルを作成　コマンド　--forceで上書きする
dotnet ef dbcontext scaffold "Host=localhost;Database=postgres;Username=postgres;Password=???" Npgsql.EntityFrameworkCore.PostgreSQL -o Models --force


これポスグレでもマイグレーションに必要
dotnet add package Microsoft.EntityFrameworkCore.SqlServer 

モデルからコントローラを作成
dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design

モデルからコントローラを作成
dotnet tool install --global dotnet-aspnet-codegenerator

モデルからコントローラを作成
dotnet add package Microsoft.EntityFrameworkCore.Tools

モデルからコントローラを作成する modelのとこだけハイフン二つ必要
otnet aspnet-codegenerator controller -name SampleTableController --model SampleTable -dc PostgresContext -outDir Controllers








# ベースイメージとして.NET SDKを使用（ビルドステージ）
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /source

# 必要なファイルをコピーしてビルド
COPY *.csproj .
RUN dotnet restore

COPY . .
RUN dotnet publish -c Release -o /app

# 実行用のランタイムイメージ
FROM mcr.microsoft.com/dotnet/aspnet:8.0
WORKDIR /app
COPY --from=build /app .
ENTRYPOINT ["dotnet", "MyWebApi.dll"]

dotnet publish -c Release -o ./app
http://localhost:5028/weatherforecast/
http://localhost:8080/weatherforecast/
#build
docker build -t your-app-name .
#run
docker run -d -p 8080:8080 --name your-app-container your-app-name
#log
docker logs your-app-container

